// @contact.name API Support
// @contact.url http://tkwallet
// @contact.email 254606826@qq.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @securityDefinitions.basic BasicAuth

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name apikey

package routes

import (
	"hyperledger/controller/usercontroller"
	"hyperledger/middleware"
	"hyperledger/statics"
	"hyperledger/webserver"
	"net/http"
	"strings"

	"github.com/axiaoxin-com/logging"

	ginSwagger "github.com/swaggo/gin-swagger"
	"hyperledger/routes/docs"
	"hyperledger/version"

	"github.com/spf13/viper"

	// docs is generated by Swag CLI, you have to import it.
	_ "hyperledger/routes/docs"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
)

const (
	// DisableGinSwaggerEnvkey 设置该环境变量时关闭 swagger 文档
	DisableGinSwaggerEnvkey = "DISABLE_GIN_SWAGGER"
)

var allowedHeaders = map[string]struct{}{
	"x-request-id": {},
}

func isHeaderAllowed(s string) (string, bool) {
	// check if allowedHeaders contain the header
	if _, isAllowed := allowedHeaders[s]; isAllowed {
		// send uppercase header
		return strings.ToUpper(s), true
	}
	// if not in allowed header, don't send the header
	return s, false
}

// InitRouter 在 gin engine 上注册 url 对应的 HandlerFunc
func InitRouter(httpHandler http.Handler) {
	app, ok := httpHandler.(*gin.Engine)
	if !ok {
		panic("HTTP handler must be *gin.Engine")
	}
	app.Use(middleware.CORSMiddleware())

	// api 文档变量设置，注意这里依赖 viper 读配置，需要保证在 main 中已预先加载这些配置项
	docs.SwaggerInfo.Title = viper.GetString("apidocs.title")
	docs.SwaggerInfo.Description = viper.GetString("apidocs.desc")
	docs.SwaggerInfo.Version = version.Version
	docs.SwaggerInfo.Host = viper.GetString("apidocs.host")
	docs.SwaggerInfo.BasePath = viper.GetString("apidocs.basepath")
	docs.SwaggerInfo.Schemes = viper.GetStringSlice("apidocs.schemes")

	// Group x 默认 url 路由
	x := app.Group("/v1/hyperledger")
	{
		//	if viper.GetBool("server.pprof") {
		//		pprof.RouteRegister(x, "/pprof")
		//	}
		//	if viper.GetBool("server.metrics") {
		//		x.GET("/metrics", webserver.PromExporterHandler())
		//	}
		//	// ginSwagger 生成的在线 API 文档路由
		x.Static("/fe", "./statics/fe")
		//x.StaticFile("/fe", http.Dir("./statics/fe"))
		//x.StaticFile("/fe/index.html", "./statics/fe/index.html")

		i := x.Group("/info", webserver.GinBasicAuth())
		{
			i.GET("/apidocs/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, DisableGinSwaggerEnvkey))
		}
		// 默认的 ping 方法，返回 server 相关信息
		//x.Any("/ping", Ping)
		x.GET("/robots.txt", func(c *gin.Context) {
			file, err := statics.Files.ReadFile("robots.txt")
			if err != nil {
				logging.Error(c, "read robots file error:"+err.Error())
			}
			c.Data(http.StatusOK, "text/plain", file)
			return
		})
	}
	Routes(app)
}

// Routes 注册 API URL 路由
func Routes(app *gin.Engine) {
	g := app.Group("/v1/hyperledger")
	{
		groupSetting := g.Group("/erc721")
		{
			groupSetting.POST("/mint", usercontroller.Mint)
			groupSetting.POST("/transfer", usercontroller.Transfer)
		}

		groupSetting20 := g.Group("/erc20")
		{
			groupSetting20.POST("/mint", usercontroller.MintERC20)
			groupSetting20.POST("/transfer", usercontroller.TransferERC20)
		}
	}
}

type SPubk struct {
	Pubkey string `json:"pubkey"`
}
